//Autor: Franco Larrea

using System;

[Serializable]
class Administrador: Usuario
{
    public Administrador(string nombre, string contrasena) 
        : base(nombre, contrasena)
    {
    }

    public override Usuario PanelPersonal(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        Usuario usuarioActual = this;

        string[] opciones = { "Maquinas", "Ajustes", "Administrador", "Cerrar sesión" };
        string titulo = "Panel de " + nombre + "[" + puntuacion + "]";

        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo(titulo);

        string opcion = m.EjecutarMenu();

        bool salir = false;

        switch (opcion)
        {
            case "1":
                do
                {
                    salir = PanelPersonalMaquinas(usuarios, maquinas, usuariosMaquinas);
                } while (!salir);
                break;

            case "2":
                do
                {
                    salir = PanelPersonalAjustes(usuarios, maquinas, usuariosMaquinas);
                } while (!salir);
                break;

            case "3":
                do
                {
                    salir = PanelAdministrador(usuarios, maquinas, usuariosMaquinas);
                } while (!salir);
                break;

            case "4":
                usuarioActual = null;
                m.MostrarMensaje("Cerrando sesión...");

                Serializador serializador = new Serializador();
                serializador.Guardar(ref usuarios, ref maquinas, ref usuariosMaquinas, m, true, 2);
                break;

            default:
                m.MostrarMensajeError("Opcion no valida");
                break;
        }

        return usuarioActual;
    }

    bool PanelAdministrador(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        bool salir = false;
        bool salirAdminMenu = false;

        string[] opciones = 
            {
                "Maquinas",
                "Usuarios",
                "Volver"
            };

        string titulo = "Administrador";

        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo(titulo);

        string opcion = m.EjecutarMenu();

        switch (opcion)
        {
            case "1":
                do
                {
                    salirAdminMenu = AdministrarMaquinas(usuarios, maquinas, usuariosMaquinas);
                } while (!salirAdminMenu);
                break;

            case "2":
                do
                {
                    salirAdminMenu = AdministrarUsuarios(usuarios);
                } while (!salirAdminMenu);
                break;

            case "3":
                salir = true;
                break;

            default:
                m.MostrarMensajeError("Opción no valida");
                break;
        }

        return salir;
    }

    void MostrarSolicitudesNuevasMaquinas(Dictionary<string, Usuario> usuarios,
        Menu menu)
    {
        string titulo = "Mostrar solicitudes";
        menu.MostrarTitulo(titulo);

        bool algunaSolicitud = false;
        int i = 0;
        int j = 0;

        foreach (string uClave in usuarios.Keys)
        {
            Usuario usuario = usuarios[uClave];
            List<string> solicitudesMaquinas = usuario.SolicitudesMaquinas;

            if (solicitudesMaquinas.Count > 0)
            {
                algunaSolicitud = true;
                menu.MostrarMensaje("Solicitud de maquina de " + usuario.Nombre, false, i);

                j = i + 1;

                foreach (string solicitudMaquina in solicitudesMaquinas) 
                { 
                    menu.MostrarMensaje(solicitudMaquina, false, j);
                    j++;
                }
            }

            i += sugerencias.Count + 1;
        }

        if (!algunaSolicitud)
        {
            menu.MostrarMensaje("No hay solicitudes de maquinas.");
        }
        else
            EliminarSolicitudesMaquinas(usuarios, menu, j);
    }

    void EliminarSolicitudesMaquinas(Dictionary<string, Usuario> usuarios, Menu menu, int j)
    {
        string opcion =
            menu.Pedir("Eliminar solicitudes de maquinas? [s/N] ", false, j + 1);

        if (opcion.Equals("s"))
        {
            foreach (string uClave in usuarios.Keys)
                usuarios[uClave].SolicitudesMaquinas.Clear();

            menu.MostrarMensajeCorrecto("Solicitudes de maquinas eliminadas.", true, j + 2);
        }
        else
            menu.MostrarMensajeError("Abortando...", true, j + 2);
    }

    void MostrarSugerenciasUsuarios(Dictionary<string, Usuario> usuarios, Menu menu)
    {
        string titulo = "Mostrar Sugerencias";
        menu.MostrarTitulo(titulo);

        bool algunaSugerencia = false;
        int i = 0;
        int j = 0;

        foreach (string uClave in usuarios.Keys)
        {
            Usuario usuario = usuarios[uClave];
            List<string> sugerencias = usuario.Sugerencias;

            if (sugerencias.Count > 0)
            {
                algunaSugerencia = true;
                menu.MostrarMensaje("Sugerencia de " + usuario.Nombre, false, i);

                j = i + 1;

                foreach (string sugerencia in sugerencias) 
                {
                    menu.MostrarMensaje(sugerencia, false, j);
                    j++;
                }
            }

            i += sugerencias.Count + 1;
        }

        if (!algunaSugerencia)
        {
            menu.MostrarMensaje("No hay sugerencias.");
        }
        else
            EliminarSugerencias(usuarios, menu, j);
    }

    void EliminarSugerencias(Dictionary<string, Usuario> usuarios, Menu menu, int j)
    {
        string opcion =
            menu.Pedir("Eliminar sugerencias? [s/N] ", false, j+1);

        if (opcion.Equals("s"))
        {
            foreach (string uClave in usuarios.Keys)
                usuarios[uClave].Sugerencias.Clear();

            menu.MostrarMensajeCorrecto("Sugerencias eliminadas.", true, j+2);
        }
        else
            menu.MostrarMensajeError("Abortando...", true, j + 2);
    }


    bool AdministrarMaquinas(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        bool salir = false;

        string[] opciones =
            {
                "Mostrar maquinas activas",
                "Parar todas las maquinas",
                "System Prune",
                "Añadir maquina",
                "Eliminar maquina",
                "Mostrar solicitudes para nuevas maquinas",
                "Volver"
            };


        string titulo = "Administrar Maquinas";

        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo(titulo);

        string opcion = m.EjecutarMenu();

        switch (opcion)
        {
            case "1":
                MostrarMaquinasActivas(usuarios, usuariosMaquinas, m);
                break;

            case "2":
                ApagarTodasLasMaquinas(usuarios, usuariosMaquinas, m);
                break;

            case "3":
                ConexionSSH conexionSSH = new ConexionSSH();
                m.MostrarMensaje(conexionSSH.EjecutarComando("docker system prune -f"), false);
                m.EsperarEnter();
                break;

            case "4":
                AnadirMaquina(usuarios, maquinas, usuariosMaquinas, m);
                break;

            case "5":
                EliminarMaquina(usuarios, maquinas, usuariosMaquinas, m);
                break;

            case "6":
                MostrarSolicitudesNuevasMaquinas(usuarios, m);
                break;

            case "7":
                salir = true;
                break;

            default:
                m.MostrarMensajeError("Opcion no valida.");
                break;
        }

        return salir;
    }

    void MostrarMaquinasActivas(Dictionary<string, Usuario> usuarios,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas, 
        Menu menu)
    {
        string titulo = "Mostrar maquinas activas";
        menu.MostrarTitulo(titulo);

        bool ningunaMaquinaActiva = true;
        int index = 0;

        foreach (string uClave in usuarios.Keys)
        {
            Usuario usuario = usuarios[uClave];

            if (!usuario.QueMaquinaEstaEncendida(usuariosMaquinas).Equals("")) 
            {
                menu.MostrarMensaje(usuario.Nombre + "-" + usuario.QueMaquinaEstaEncendida(usuariosMaquinas), false, index);
                ningunaMaquinaActiva = false;
                index++;
            }


        }

        if (ningunaMaquinaActiva)
            menu.MostrarMensaje("No hay maquinas activas");
        else
            menu.EsperarEnter(index+1);
            
    }

    void ApagarTodasLasMaquinas(Dictionary<string, Usuario> usuarios,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas,
        Menu menu)
    {
        string titulo = "Parar todas las maquinas";
        menu.MostrarTitulo(titulo);

        int index = 0;

        foreach (string uClave in usuarios.Keys)
        {
            Usuario usuario = usuarios[uClave];

            string maquinaEncendida =
                usuario.QueMaquinaEstaEncendida(usuariosMaquinas);

            if (!maquinaEncendida.Equals("")) 
            {
                string umClave =
                    Administracion.CrearClaveUsuarioMaquina(usuario.Nombre, maquinaEncendida);

                menu.MostrarMensaje(usuariosMaquinas[umClave].Apagar("s"), false, index);

                index++;
            }

        }

        menu.MostrarMensaje("Todas las maquinas apagadas.", true, index+1);

        if (index != 0)
            menu.EsperarEnter(index + 3);

    }

    void AnadirMaquina(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas, 
        Menu menu)
    {
        string titulo = "Añadir maquina";
        menu.MostrarTitulo(titulo);

        string nombre = menu.Pedir("Nombre: ");
        int dificultad = Convert.ToInt32(menu.Pedir("Dificultad: ", false, 1));
        string autor = menu.Pedir("Autor: ", false, 2);
        string banderaUsuario = menu.Pedir("Bandera usuario: ", false, 3);
        string banderaRoot = menu.Pedir("Bandera root: ", false, 4);

        menu.MostrarMensaje(@"Hay que añadir lo siguiente al comando: ", false, 6);
        menu.MostrarMensaje(@"' --name <NOMBREMAQUINA> --hostname <NOMBREMAQUINA> --network=<NETWORK> '", false, 7);
        string cDocker = menu.Pedir("Comando docker: ", true, 8);

        Maquina maquina = new Maquina(nombre, dificultad, autor, banderaUsuario, banderaRoot, cDocker);

        if (!maquinas.ContainsKey(nombre)) 
        {
            maquinas.Add(nombre, maquina);
            Administracion.ActualizarRelaciones(usuarios, maquinas, usuariosMaquinas);

            Serializador serializador = new Serializador();
            serializador.Guardar(ref usuarios, ref maquinas, ref usuariosMaquinas);

            menu.MostrarMensajeCorrecto("Maquina añadida", true, 11);
        }
        else
            menu.MostrarMensajeError("El nombre esta en uso", true, 11);


    }

    void EliminarMaquina(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas,
        Menu menu)
    {
        string titulo = "Eliminar maquina";
        menu.MostrarTitulo(titulo);

        string maquinaAEliminar = menu.Pedir("Introduce la maquina a eliminar: ");

        if (maquinas.ContainsKey(maquinaAEliminar))
        {
            menu.MostrarMensaje(maquinas[maquinaAEliminar].ToString(), false, 1);
            string confirmacion = menu.Pedir("Eliminar? [s/N] ", false, 3);

            if (confirmacion.Equals("s"))
            {
                maquinas.Remove(maquinaAEliminar);

                Administracion.ActualizarRelaciones(usuarios, maquinas, usuariosMaquinas);

                Serializador serializador = new Serializador();
                serializador.Guardar(ref usuarios, ref maquinas, ref usuariosMaquinas);

                menu.MostrarMensajeCorrecto("Maquina " + maquinaAEliminar + " eliminada", true, 5);
            }
            else
                menu.MostrarMensajeError("Abortando...", true, 5);
        }
        else
            menu.MostrarMensajeError("La maquina no existe.", true, 2);
    }

    bool AdministrarUsuarios(Dictionary<string, Usuario> usuarios)
    {
        bool salir = false;

        string[] opciones =
            {
                "Mostrar todos los usuarios",
                "Eliminar usuario",
                "Mostrar sugerencias",
                "Volver"
            };

        string titulo = "Administrar Usuarios";

        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo(titulo);

        string opcion = m.EjecutarMenu();

        switch (opcion)
        {
            case "1":
                int index = 0;

                foreach (string uClave in usuarios.Keys)
                {
                    m.MostrarMensaje(usuarios[uClave].ToString(), false, index);
                    index++;
                }

                m.EsperarEnter(index+1);
                break;

            case "2":
                EliminarUsuario(usuarios, m); 
                break;

            case "3":
                MostrarSugerenciasUsuarios(usuarios, m);
                break;

            case "4":
                salir = true;
                break;

            default:
                Console.WriteLine("Opción no valida.");
                break;
        }

        return salir;
    }

    void EliminarUsuario(Dictionary<string, Usuario> usuarios, Menu menu)
    {
        string titulo = "Eliminar usuario";
        menu.MostrarTitulo(titulo);

        string usuarioAEliminar =
            menu.Pedir("Introduce el usuario a eliminar: ");

        if (usuarios.ContainsKey(usuarioAEliminar))
        {
            menu.MostrarMensaje(usuarios[usuarioAEliminar].ToString(), false, 1);
            string confirmacion = menu.Pedir("Eliminar? [s/N] ", false, 3);

            if (confirmacion.Equals("s"))
            {
                usuarios.Remove(usuarioAEliminar);
                menu.MostrarMensajeCorrecto("Usuario " + usuarioAEliminar + " eliminado", true, 5);
            }
            else
                menu.MostrarMensajeError("Abortando...", true, 5);
        }
        else
            menu.MostrarMensajeError("El usuario no existe.", true, 2);
    }

}