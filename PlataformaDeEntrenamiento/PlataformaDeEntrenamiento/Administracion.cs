//Autor: Franco Larrea

using System;

class Administracion
{
    protected Dictionary<string, Usuario> usuarios;
    protected Dictionary<string, Maquina> maquinas;
    protected Dictionary<string, UsuarioMaquina> usuariosMaquinas;

    public void Inicializar()
    {
        usuarios = new Dictionary<string, Usuario>();
        maquinas = new Dictionary<string, Maquina>();
        usuariosMaquinas = new Dictionary<string, UsuarioMaquina>();

        Serializador serializador = new Serializador();
        serializador.Cargar(ref usuarios, ref maquinas, ref usuariosMaquinas);
        
        ActualizarRelaciones(usuarios, maquinas, usuariosMaquinas);
    }

    public static string Pedir(string mensaje)
    {
        Console.Write(mensaje);
        return Console.ReadLine();
    }

    public Usuario PanelDeInicioDeSesion()
    {
        Usuario usuarioActual = null;

        string[] opciones = { "Iniciar sesión", "Registrarse", "Salir" };


        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo("Laboratorio de Ciberseguridad");
        string opcion = m.EjecutarMenu();

        string nombre;
        string contrasena;

        switch (opcion)
        {
            case "1":
                m.MostrarTitulo("Iniciar Sesión");
                
                do
                {
                    nombre = m.Pedir("Nombre: ");
                } while (nombre.Equals(""));

                do
                {
                    contrasena = m.PedirOcultando("Contraseña: ", 1);
                } while (contrasena.Equals(""));

                string contrasena_encriptada = Serializador.GetSHA256(contrasena);

                usuarioActual = IniciarSesion(nombre, contrasena_encriptada, usuarios);

                if (usuarioActual != null)
                    m.MostrarMensajeCorrecto("Inicio de sesión exitoso", true, 3);
                else 
                    m.MostrarMensajeError("Inicio de sesión fallido", true, 3);
                break;

            case "2":
                m.MostrarTitulo("Registrarse");

                do
                {
                    nombre = m.Pedir("Nombre: ");
                } while (nombre.Equals(""));

                do
                {
                    contrasena = m.PedirOcultando("Contraseña: ", 1);
                } while (contrasena.Equals(""));

                contrasena_encriptada = Serializador.GetSHA256(contrasena);
                usuarioActual = Registrarse(nombre, contrasena_encriptada, usuarios);

                if (usuarioActual != null)
                    m.MostrarMensajeCorrecto("Registro exitoso", true, 3);
                else
                    m.MostrarMensajeError("Registro fallido", true, 3);
                break;

            case "3":
                m.MostrarMensaje("Saliendo...");
                Environment.Exit(0);
                break;

            default:
                m.MostrarMensajeError("Opción no valida.");
                break;
        }

        return usuarioActual;
    }

    public static Usuario IniciarSesion(string nombre, string contrasena,
        Dictionary<string, Usuario> usuarios)
    {
        Usuario usuario = null;

        if (usuarios.ContainsKey(nombre))
            if (usuarios[nombre].Contrasena.Equals(contrasena))
                usuario = usuarios[nombre];

        return usuario;
    }

    Usuario Registrarse(string nombre, string contrasena,
        Dictionary<string, Usuario> usuarios)
    {
        bool usuarioExiste = usuarios.ContainsKey(nombre);
        Usuario usuario = null;

        if (!usuarioExiste)
        {
            usuario = new Usuario(nombre, contrasena);
            usuarios.Add(nombre, usuario);
            ActualizarRelaciones(usuarios, maquinas, usuariosMaquinas);
        }

        return usuario;
    }

    public static void ActualizarRelaciones(
        Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas, 
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        foreach (string uClave in usuarios.Keys)
        {
            foreach (string mClave in maquinas.Keys)
            {
                string umClave = CrearClaveUsuarioMaquina(uClave, mClave);

                UsuarioMaquina usuarioMaquina = 
                    new UsuarioMaquina(usuarios[uClave], maquinas[mClave]);

                usuariosMaquinas.TryAdd(umClave, usuarioMaquina);
            }
        }
    }

    public static string CrearClaveUsuarioMaquina(string nombreUsuario, string nombreMaquina)
    {
        return nombreUsuario + "-" + nombreMaquina;
    }
    
    public Usuario PanelPersonal(Usuario usuarioActual)
    {
        return usuarioActual.PanelPersonal(usuarios, maquinas, usuariosMaquinas);
    }
}
