//Autor: Franco Larrea

using System;

[Serializable]
class Usuario : IComparable<Usuario>
{
    protected string nombre;
    protected string contrasena;
    protected int puntuacion;

    protected List<string> solicitudesMaquinas = new List<string>();
    protected List<string> sugerencias = new List<string>();

    public Usuario(string nombre, string contrasena) 
    {
        this.nombre = nombre;
        this.contrasena = contrasena;
        this.puntuacion = 0;
    }

    public string Nombre
    {
        get { return nombre; }
        set { nombre = value; }
    }

    public string Contrasena
    {
        get { return contrasena; }
        set { contrasena = value; }
    }

    public int Puntuacion
    {
        get { return puntuacion; }
        set { puntuacion = value; }
    }

    public List<string> SolicitudesMaquinas
    {
        get { return solicitudesMaquinas; }
        set { solicitudesMaquinas = value; }
    }

    public List<string> Sugerencias
    {
        get { return sugerencias; }
        set { sugerencias = value; }
    }

    public void SumarBanderaUsuario() 
    {
        Puntuacion = Puntuacion + 50;
    }

    public void SumarBanderaRoot()
    {
        Puntuacion = Puntuacion + 100;
    }

    public virtual Usuario PanelPersonal(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        Usuario usuarioActual = this;

        string[] opciones = { "Maquinas", "Ajustes", "Cerrar sesión" };
        string titulo = "Panel de " + nombre + "[" + puntuacion + "]";

        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo(titulo);

        string opcion = m.EjecutarMenu();

        bool salir;

        switch (opcion)
        {
            case "1":
                do
                {
                    salir = PanelPersonalMaquinas(usuarios, maquinas, usuariosMaquinas);
                } while (!salir);
                break;

            case "2":
                do
                {
                    salir = PanelPersonalAjustes(usuarios, maquinas, usuariosMaquinas);
                } while (!salir);
                break;

            case "3":
                usuarioActual = null;
                m.MostrarMensaje("Cerrando sesión...");

                Serializador serializador = new Serializador();
                serializador.Guardar(ref usuarios, ref maquinas, ref usuariosMaquinas, m, true, 2);
                break;

            default:
                m.MostrarMensajeError("Opcion no valida");
                break;
        }

        return usuarioActual;
    }

    protected bool PanelPersonalMaquinas(Dictionary<string, Usuario> usuarios, 
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        bool salir = false;
        
        string titulo = "Maquinas";
        string[] opciones =
            {
                "Mostrar maquinas",
                ((QueMaquinaEstaEncendida(usuariosMaquinas).Equals("")) ? "Encender" : "Apagar") + " maquina",
                "Mostrar detalles de una maquina",
                "Mostrar VPN wireguard",
                "Mostrar IP Objetivo",
                "Introducir bandera",
                "Mostrar writeups",
                "Subir writeup",
                "Eliminar writeup",
                "Descargar Writeups",
                "Solicitar una nueva maquina",
                "Ranking",
                "Volver"
            };

        Menu menu = new Menu(opciones);
        menu.LimpiarPantalla();

        menu.MostrarTitulo(titulo);

        string opcion = menu.EjecutarMenu();

        Console.WriteLine();

        switch (opcion)
        {
            case "1":
                MostrarMaquinas(maquinas, menu);
                break;

            case "2":
                EncenderApagarMaquina(usuarios, maquinas, usuariosMaquinas, menu);
                break;

            case "3":
                MostrarDetallesMaquina(maquinas, usuariosMaquinas, menu);
                break;

            case "4":
                MostrarVPN(usuariosMaquinas, menu);
                break;

            case "5":
                MostrarIPObjetivo(usuariosMaquinas, menu);
                break;

            case "6":
                IntroducirBanderaMaquina(maquinas, usuariosMaquinas, menu);
                break;

            case "7":
                MostrarWriteupsMaquina(maquinas, menu);
                break;

            case "8":
                AnadirWriteupMaquina(maquinas, menu);
                break;

            case "9":
                EliminarWriteupMaquina(maquinas, menu);
                break;

            case "10":
                DescargarWriteups(maquinas, menu); 
                break;

            case "11":
                SolicitarMaquina(menu);
                break;

            case "12":
                MostrarRanking(usuarios, menu);
                break;

            case "13":
                salir = true;
                break;

            default:
                menu.MostrarMensajeError("Opcion no valida.");
                break;
        }

        return salir;
    }

    protected bool PanelPersonalAjustes(
        Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        bool salir = false;

        string titulo = "Ajustes";
        string[] opciones =
            {
                "Ajustes personales",
                "Enviar sugerencias",
                "Borrar cuenta",
                "Volver",
            };

        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo(titulo);

        string opcion = m.EjecutarMenu();

        switch (opcion)
        {
            case "1":
                AjustesPersonales(usuarios, maquinas, usuariosMaquinas);
                break;

            case "2":
                EnviarSugerencias(m);
                break;

            case "3":
                EliminarCuenta(usuarios, maquinas, usuariosMaquinas);
                break;

            case "4":
                salir = true;
                break;

            default:
                Console.WriteLine("Opcion no valida");
                break;
        }

        return salir;
    }

    //Metodos del menu Maquinas
    void MostrarMaquinas(Dictionary<string, Maquina> maquinas, Menu menu)
    {
        string titulo = "Mostrar maquinas";
        menu.MostrarTitulo(titulo);

        int index = 0;

        foreach (string clave in maquinas.Keys) 
        {
            if (maquinas[clave].Dificultad != 0)
            {
                menu.MostrarMensaje(maquinas[clave].ToString(), false, index);
                index++;
            }
        }

        menu.EsperarEnter(index+1);
    }

    void EncenderApagarMaquina(
        Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas,
        Menu menu)
    {
        Serializador serializador = new Serializador();
        string queMaquinaEstaEncendida = QueMaquinaEstaEncendida(usuariosMaquinas);
        string queMaquinaAtacanteEstaEncendida = QueMaquinaAtacanteEstaEncendida(usuariosMaquinas);
        string titulo;

        if (queMaquinaEstaEncendida.Equals(""))
        {
            titulo = "Encender maquina";
            menu.MostrarTitulo(titulo);

            string maquinaAEncender =
                menu.Pedir("Introduce la maquina a encender: ");

            if (maquinas.ContainsKey(maquinaAEncender))
            {
                string umClave =
                    Administracion.CrearClaveUsuarioMaquina(nombre, maquinaAEncender);

                usuariosMaquinas[umClave].Encender(menu, true, 2);

                string maquinaAtEncender = 
                    menu.Pedir("¿Quieres encender una maquina atacante? [s/N] ", false, 5);

                if (maquinaAtEncender.Equals("s")) 
                {
                    string umAtClave =
                        Administracion.CrearClaveUsuarioMaquina(nombre, "debian-rdp");

                    usuariosMaquinas[umAtClave].Encender(menu, true, 7);
                }

                serializador.Guardar(ref usuarios, ref maquinas, ref usuariosMaquinas);
            }
            else
                menu.MostrarMensajeError("La maquina no existe.", true, 2);
        }
        else
        {
            titulo = "Apagar maquina";
            menu.MostrarTitulo(titulo);

            string confirmacion =
                menu.Pedir("¿Parar la maquina " + 
                queMaquinaEstaEncendida + "? [s/N]: ");

            string umClave =
                    Administracion.CrearClaveUsuarioMaquina(nombre, queMaquinaEstaEncendida);
            
            

            if (confirmacion.Equals("s"))
            {
                usuariosMaquinas[umClave].Apagar(menu, true, 2);

                if (!queMaquinaAtacanteEstaEncendida.Equals("")) 
                {
                    string umAtClave =
                        Administracion.CrearClaveUsuarioMaquina(nombre, queMaquinaAtacanteEstaEncendida);

                    usuariosMaquinas[umAtClave].Apagar(menu, true, 5);
                }

                serializador.Guardar(ref usuarios, ref maquinas, ref usuariosMaquinas);
            }
            else
                menu.MostrarMensajeError("Abortando...", true, 2);
        }
    }

    void MostrarDetallesMaquina(Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas,
        Menu menu)
    {
        string titulo = "Mostrar detalles de una maquina";
        menu.MostrarTitulo(titulo);

        string maquinaAMostrar =
                menu.Pedir("Introduce el nombre de una maquina: ");

        if (maquinas.ContainsKey(maquinaAMostrar))
        {
            string umClave =
                Administracion.CrearClaveUsuarioMaquina(nombre, maquinaAMostrar);

            usuariosMaquinas[umClave].MostrarDetalles(menu, false, 1);

            menu.EsperarEnter(8);
        }
        else
            menu.MostrarMensajeError("La maquina no existe.", true, 2);

    }

    void MostrarVPN(Dictionary<string, UsuarioMaquina> usuariosMaquinas, Menu menu)
    {
        string titulo = "VPN Wireguard";
        menu.MostrarTitulo(titulo);

        string maquinaActiva = QueMaquinaEstaEncendida(usuariosMaquinas);

        if (!maquinaActiva.Equals("")) 
        {
            string umClave =
                    Administracion.CrearClaveUsuarioMaquina(nombre, maquinaActiva);

            usuariosMaquinas[umClave].MostrarConfiguracionVPN(menu, false, -1);

            menu.EsperarEnter(12);
        }
        else
            menu.MostrarMensajeError("No hay maquinas activas.");

    }

    void MostrarIPObjetivo(Dictionary<string, UsuarioMaquina> usuariosMaquinas, Menu menu)
    {
        string titulo = "IP Objetivo";
        menu.MostrarTitulo(titulo);

        string maquinaActiva = QueMaquinaEstaEncendida(usuariosMaquinas);

        if (!maquinaActiva.Equals(""))
        {
            string umClave =
                Administracion.CrearClaveUsuarioMaquina(nombre, maquinaActiva);

            usuariosMaquinas[umClave].ObtenerIpMaquina(menu, false);

            string maquinaAtActiva = QueMaquinaAtacanteEstaEncendida(usuariosMaquinas);

            if (!maquinaAtActiva.Equals(""))
            {
                string umAtClave =
                    Administracion.CrearClaveUsuarioMaquina(nombre, maquinaAtActiva);

                usuariosMaquinas[umAtClave].ObtenerIpMaquina(menu, false, 1);
            }

            menu.EsperarEnter(3);
        }
        else
            menu.MostrarMensajeError("No hay maquinas activas.");
    }

    void IntroducirBanderaMaquina(Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas,
        Menu menu) 
    {
        string titulo = "Introducir bandera";
        menu.MostrarTitulo(titulo);
        bool banderaValida = false;

        string banderaIntroducida
                = menu.Pedir("Introduce la bandera: ");

        foreach (string mClave in maquinas.Keys)
        {
            string umClave = Administracion.CrearClaveUsuarioMaquina(nombre, mClave);
            UsuarioMaquina usuarioMaquina = usuariosMaquinas[umClave];
            Maquina maquina = maquinas[mClave];

            if (maquinas[mClave].BanderaUsuario.Equals(banderaIntroducida))
            {
                if (!usuarioMaquina.UsuarioCompletado)
                {
                    menu.MostrarMensajeCorrecto("Has introducido una bandera de usuario.", true, 2);
                    usuarioMaquina.UsuarioCompletado = true;
                    SumarBanderaUsuario();

                    if (maquina.PrimerUsuario.Equals(""))
                        maquina.PrimerUsuario = nombre;
                }
                else
                    menu.MostrarMensajeError("Bandera de usuario ya introducida.", true, 2);

                banderaValida = true;
            }
            else if (maquinas[mClave].BanderaRoot.Equals(banderaIntroducida))
            {
                if (!usuarioMaquina.RootCompletado)
                {
                    menu.MostrarMensajeCorrecto("Has introducido una bandera de root.", true, 2);
                    usuarioMaquina.RootCompletado = true;
                    SumarBanderaRoot();

                    if (maquina.PrimerRoot.Equals(""))
                        maquina.PrimerRoot = nombre;
                }
                else
                    menu.MostrarMensajeError("Bandera de root ya introducida.", true , 2);

                banderaValida = true;
            }
            
            if (banderaValida && usuarioMaquina.Completada)
                maquina.MaquinaResuelta();
        }

        if (!banderaValida)
            menu.MostrarMensajeError("Bandera incorrecta.", true, 2);

    }

    public string QueMaquinaEstaEncendida(Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        string nombreMaquina = "";

        foreach (string umClave in usuariosMaquinas.Keys)
        {
            if (usuariosMaquinas[umClave].Encendida && 
                usuariosMaquinas[umClave].Maquina.Dificultad != 0 &&
                usuariosMaquinas[umClave].Usuario.Nombre.Equals(nombre)) 
            {
                nombreMaquina = usuariosMaquinas[umClave].Maquina.Nombre;
            }
        }

        return nombreMaquina;
    }

    public string QueMaquinaAtacanteEstaEncendida(Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        string nombreMaquina = "";

        foreach (string umClave in usuariosMaquinas.Keys)
        {
            if (usuariosMaquinas[umClave].Encendida &&
                usuariosMaquinas[umClave].Maquina.Dificultad == 0 &&
                usuariosMaquinas[umClave].Usuario.Nombre.Equals(nombre))
            {
                nombreMaquina = usuariosMaquinas[umClave].Maquina.Nombre;
            }
        }

        return nombreMaquina;
    }

    void MostrarWriteupsMaquina(Dictionary<string, Maquina> maquinas,
        Menu menu)
    {
        string maquinaObjetivo = 
            menu.Pedir("Introduce el nombre de la maquina: ");

        if (maquinas.ContainsKey(maquinaObjetivo)) 
            maquinas[maquinaObjetivo].MostrarWriteups(menu, false, 1);
        else
            menu.MostrarMensajeError("La maquina no existe.", true, 1);
    }

    void AnadirWriteupMaquina(Dictionary<string, Maquina> maquinas,
        Menu menu)
    {
        string maquinaObjetivo = 
            menu.Pedir("Introduce el nombre de la maquina: ");

        if (maquinas.ContainsKey(maquinaObjetivo))
        {
            Maquina maquina = maquinas[maquinaObjetivo];
            string autor = nombre;
            string contenidoWriteup = 
                menu.Pedir("Introduce el writeup (url o texto plano): ", true, 2);

            if (!contenidoWriteup.Equals(""))
            {
                Writeup writeup = new Writeup(autor, contenidoWriteup);
                maquina.AnadirWriteup(writeup, menu, true, 1);
            }
            else
                menu.MostrarMensajeError("El writeup esta vacio.", true, 4);
        }
        else
            menu.MostrarMensajeError("La maquina no existe.", true, 2);
    }

    void EliminarWriteupMaquina(Dictionary<string, Maquina> maquinas,
        Menu menu)
    {
        string titulo = "Eliminar writeup";
        menu.MostrarTitulo(titulo);

        string maquinaObjetivo =
            menu.Pedir("Introduce el nombre de la maquina: ");

        if (maquinas.ContainsKey(maquinaObjetivo))
        {
            Maquina maquina = maquinas[maquinaObjetivo];
            string autor = nombre;
            
            string confirmacion = menu.Pedir("¿Eliminar writeup en " + maquinaObjetivo + "? [s/N] ", false, 2);

            if (confirmacion.Equals("s")) 
            {
                maquina.EliminarWriteup(autor, menu, true, 4);
            }
            else
                menu.MostrarMensajeError("Abortando...", true, 4);
        }
        else
            menu.MostrarMensajeError("La maquina no existe.", true, 2);
    }

    void DescargarWriteups(Dictionary<string, Maquina> maquinas,
        Menu menu)
    {
        string maquinaObjetivo =
            menu.Pedir("Introduce el nombre de la maquina: ");

        if (maquinas.ContainsKey(maquinaObjetivo))
        {
            Maquina maquina = maquinas[maquinaObjetivo];
            maquina.DescargarWriteups(menu, true, 2);
        }
        else
            menu.MostrarMensajeError("La maquina no existe.", true, 2);
    }

    void SolicitarMaquina(Menu menu)
    {
        string solicitud =
            menu.Pedir("Describe la maquina que te gustaria que implementemos: ", true);

        if (!solicitud.Equals(""))
        {
            solicitudesMaquinas.Add(solicitud);
            menu.MostrarMensajeCorrecto("Solicitud añadida.", true, 4);
        }
        else
            menu.MostrarMensajeError("La solicitud esta vacia.", true, 3);
    }

    void MostrarRanking(Dictionary<string, Usuario> usuarios,
        Menu menu)
    {
        Usuario[] ranking = usuarios.Values.ToArray();

        Array.Sort(ranking);

        int i;
        for (i = 0; i < ranking.Length; i++)
            menu.MostrarMensaje(ranking[i].ToString(), false, i);

        menu.EsperarEnter(i+1);
    }

    void AjustesPersonales(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        string titulo = "Ajustes personales";
        string[] opciones =
            {
                "Cambiar nombre",
                "Cambiar contraseña",
                "Volver"
            };

        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo(titulo);

        string opcion = m.EjecutarMenu();

        switch (opcion)
        {
            case "1":
                CambiarNombre(usuarios, maquinas, usuariosMaquinas, m);
                break;

            case "2":
                CambiarContrasena(usuarios, m);
                break;

            case "3":
                //Volver
                break;

            default:
                Console.WriteLine("Opción no valida.");
                break;
        }
    }

    void CambiarNombre(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas,
        Menu menu)
    {
        string contrasena;
        string nuevoNombre;

        contrasena = 
            menu.PedirOcultando("Introduce la contraseña de la cuenta: ");

        string contrasena_encriptada = Serializador.GetSHA256(contrasena);

        if (Administracion.IniciarSesion(nombre, contrasena_encriptada, usuarios) != null)
        {
            menu.MostrarMensajeCorrecto("Contraseña correcta.", false, 1);

            do
            {
                nuevoNombre =
                    menu.Pedir("Introduce el nuevo nombre: ", false, 2);

            } while (nuevoNombre.Equals(""));

            if (!usuarios.ContainsKey(nuevoNombre))
            {
                usuarios.Remove(nombre);

                nombre = nuevoNombre;
                usuarios.Add(nuevoNombre, this);

                Administracion.ActualizarRelaciones(usuarios, maquinas, usuariosMaquinas);

                Serializador serializador = new Serializador();
                serializador.Guardar(ref usuarios, ref maquinas, ref usuariosMaquinas);

                menu.MostrarMensajeCorrecto("Nombre cambiado", true, 3);
            }
            else
                menu.MostrarMensajeError("Nombre no disponible", true, 3);

        }
        else
            menu.MostrarMensajeError("Contraseña incorrecta", true, 1);
    }

    void CambiarContrasena(Dictionary<string, Usuario> usuarios, Menu menu)
    {
        string contrasena;
        string nuevaContrasena;

        contrasena =
            menu.PedirOcultando("Introduce la contraseña de la cuenta: ");

        string contrasena_encriptada = Serializador.GetSHA256(contrasena);

        if (Administracion.IniciarSesion(nombre, contrasena_encriptada, usuarios) != null)
        {
            menu.MostrarMensajeCorrecto("Contraseña correcta.", false, 1);

            do
            {
                nuevaContrasena =
                    menu.PedirOcultando("Introduce la nueva contraseña: ", 2);
            } while (nuevaContrasena.Equals(""));

            usuarios[nombre].Contrasena = Serializador.GetSHA256(nuevaContrasena);

            menu.MostrarMensajeCorrecto("Contraseña cambiada", true, 3);
        }
        else
            menu.MostrarMensajeError("Contraseña incorrecta", true, 1);
    }

    void EnviarSugerencias(Menu menu) 
    {
        string sugerencia =
            menu.Pedir("Introduzca la sugerencia: ", true);

        if (!sugerencia.Equals(""))
        {
            sugerencias.Add(sugerencia);
            menu.MostrarMensajeCorrecto("Sugerencia añadida", true, 3);
        }
        else
            menu.MostrarMensajeError("La sugerencia esta vacia", true, 3);
    }

    void EliminarCuenta(Dictionary<string, Usuario> usuarios,
        Dictionary<string, Maquina> maquinas,
        Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        string[] opciones = {"Si", "No"};
        string titulo = "¿Eliminar cuenta?";

        Menu m = new Menu(opciones);
        m.LimpiarPantalla();

        m.MostrarTitulo(titulo);

        string respuesta = m.EjecutarMenu();

        if (respuesta.Equals("1"))
        {
            Menu mConf = new Menu(opciones);
            mConf.LimpiarPantalla();

            m.MostrarTitulo(titulo);

            string[] descripcion = { "¿Estas seguro?" , "Perderas todo tu progreso." };
            mConf.MostrarDescripcion(descripcion);
            
            string confirmacion = mConf.EjecutarMenu();

            if (confirmacion.Equals("1"))
            {
                usuarios.Remove(nombre);
                mConf.MostrarMensaje("Cuenta eliminada.", false, 1);
                mConf.MostrarMensaje("Saliendo...", false);

                Serializador serializador = new Serializador();
                serializador.Guardar(ref usuarios, ref maquinas, ref usuariosMaquinas);

                Environment.Exit(0);
            }
        }
    }

    public int CompareTo(Usuario u)
    {
        return u.puntuacion - this.puntuacion;
    }

    public override string ToString()
    {
        return puntuacion + " - " + nombre;
    }
}