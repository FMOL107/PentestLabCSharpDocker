//Autor: Franco Larrea

using System;
using System.Text.Json;
using System.Security.Cryptography;
using System.Text;

class Serializador
{
    private ConexionSSH conexionSSH = new ConexionSSH();

    public void Guardar(ref Dictionary<string, Usuario> usuarios, 
        ref Dictionary<string, Maquina> maquinas, 
        ref Dictionary<string, UsuarioMaquina> usuariosMaquinas,
        Menu menu, bool espera = true, int masFilas = 0)
    {
        menu.MostrarMensaje("Guardando datos...", espera, masFilas);

        try
        {
            string jsonUsuarios = JsonSerializer.Serialize(usuarios);
            string jsonMaquinas = JsonSerializer.Serialize(maquinas);
            string jsonUsuariosMaquinas = JsonSerializer.Serialize(usuariosMaquinas);

            conexionSSH.EjecutarComando("echo '" + jsonUsuarios + "' > usuarios.json");
            conexionSSH.EjecutarComando("echo '" + jsonMaquinas + "' > maquinas.json");
            conexionSSH.EjecutarComando("echo '" + jsonUsuariosMaquinas + "' > usuariosmaquinas.json");

            menu.MostrarMensajeCorrecto("Datos guardados", espera, masFilas+1);

            /*
            string jsonUsuarios = JsonSerializer.Serialize(usuarios);
            string jsonMaquinas = JsonSerializer.Serialize(maquinas);
            string jsonUsuariosMaquinas = JsonSerializer.Serialize(usuariosMaquinas);

            string jsonUsuarios_encrypted = "";
            string jsonMaquinas_encrypted = "";
            string jsonUsuariosMaquinas_encrypted = "";

            conexionSSH.EjecutarComando("echo '" + jsonUsuarios + "' > usuarios.json");
            conexionSSH.EjecutarComando("echo '" + jsonMaquinas + "' > maquinas.json");
            conexionSSH.EjecutarComando("echo '" + jsonUsuariosMaquinas + "' > usuariosmaquinas.json");

            menu.MostrarMensajeCorrecto("Datos guardados", espera, masFilas+1);

            using (Aes myAes = Aes.Create()) 
            {
                byte[] encrypted = EncryptStringToBytes_Aes(jsonUsuarios, myAes.Key, myAes.IV);
                jsonUsuarios_encrypted = Convert.ToBase64String(encrypted);

                encrypted = EncryptStringToBytes_Aes(jsonMaquinas, myAes.Key, myAes.IV);
                jsonMaquinas_encrypted = Convert.ToBase64String(encrypted);

                encrypted = EncryptStringToBytes_Aes(jsonUsuariosMaquinas, myAes.Key, myAes.IV);
                jsonUsuariosMaquinas_encrypted = Convert.ToBase64String(encrypted);

            }

            conexionSSH.EjecutarComando("echo '" + jsonUsuarios_encrypted + "' > usuarios.json.aes");
            conexionSSH.EjecutarComando("echo '" + jsonMaquinas_encrypted + "' > maquinas.json.aes");
            conexionSSH.EjecutarComando("echo '" + jsonUsuariosMaquinas_encrypted + "' > usuariosmaquinas.json.aes");

            menu.MostrarMensajeCorrecto("Datos guardados", espera, masFilas+1);*/
        }
        catch (PathTooLongException pe)
        {
            menu.MostrarMensajeError(pe.Message, espera, masFilas+1);
        }
        catch (FileNotFoundException fe)
        {
            menu.MostrarMensajeError(fe.Message, espera, masFilas+1);
        }
        catch (IOException ioe)
        {
            menu.MostrarMensajeError(ioe.Message, espera, masFilas+1);
        }
        catch (Exception e)
        {
            menu.MostrarMensajeError(e.Message, espera, masFilas+1);
        }
    }

    public void Guardar(ref Dictionary<string, Usuario> usuarios,
        ref Dictionary<string, Maquina> maquinas,
        ref Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        try
        {
            string jsonUsuarios = JsonSerializer.Serialize(usuarios);
            string jsonMaquinas = JsonSerializer.Serialize(maquinas);
            string jsonUsuariosMaquinas = JsonSerializer.Serialize(usuariosMaquinas);

            conexionSSH.EjecutarComando("echo '" + jsonUsuarios + "' > usuarios.json");
            conexionSSH.EjecutarComando("echo '" + jsonMaquinas + "' > maquinas.json");
            conexionSSH.EjecutarComando("echo '" + jsonUsuariosMaquinas + "' > usuariosmaquinas.json");
        }
        catch (Exception e)
        {
        }
    }

    public void Cargar(ref Dictionary<string, Usuario> usuarios,
        ref Dictionary<string, Maquina> maquinas,
        ref Dictionary<string, UsuarioMaquina> usuariosMaquinas)
    {
        Menu.MostrarMensajeGuardado("Cargando datos...", false);

        try
        {
            string jsonUsuarios = conexionSSH.EjecutarComando("cat usuarios.json");
            string jsonMaquinas = conexionSSH.EjecutarComando("cat maquinas.json");
            string jsonUsuariosMaquinas = conexionSSH.EjecutarComando("cat usuariosmaquinas.json");

            usuarios = JsonSerializer.Deserialize<Dictionary<string, Usuario>>(jsonUsuarios);
            maquinas = JsonSerializer.Deserialize<Dictionary<string, Maquina>>(jsonMaquinas);
            usuariosMaquinas = JsonSerializer.Deserialize<Dictionary<string, UsuarioMaquina>>(jsonUsuariosMaquinas);

            Menu.MostrarMensajeGuardado("Datos cargados.", true, 1, ConsoleColor.Green);

            /*string jsonUsuarios_encrypted = conexionSSH.EjecutarComando("cat usuarios.json.aes");
            string jsonMaquinas_encrypted = conexionSSH.EjecutarComando("cat maquinas.json.aes");
            string jsonUsuariosMaquinas_encrypted = conexionSSH.EjecutarComando("cat usuariosmaquinas.json.aes");

            string jsonUsuarios = "";
            string jsonMaquinas = "";
            string jsonUsuariosMaquinas = "";

            using (Aes myAes = Aes.Create())
            {
                byte[] bytes = Convert.FromBase64String(jsonUsuarios_encrypted);
                jsonUsuarios = DecryptStringFromBytes_Aes(bytes, myAes.Key, myAes.IV);

                bytes = Convert.FromBase64String(jsonMaquinas_encrypted);
                jsonMaquinas = DecryptStringFromBytes_Aes(bytes, myAes.Key, myAes.IV);

                bytes = Convert.FromBase64String(jsonUsuariosMaquinas_encrypted);
                jsonUsuariosMaquinas = DecryptStringFromBytes_Aes(bytes, myAes.Key, myAes.IV);
            }

            Menu.MostrarMensajeGuardado("Datos cargados.", true, 1, ConsoleColor.Green);*/

        }
        catch (Exception e)
        {

            usuarios.Add("fmol", new Administrador("fmol", GetSHA256("fmol")));
            usuarios.Add("pepe", new Usuario("pepe", GetSHA256("pepe")));
            usuarios.Add("paco", new Usuario("paco", GetSHA256("paco")));

            //Metasploitable2
            maquinas.Add("Metasploitable2", new Maquina("Metasploitable2", 1, "tleemcjr",
                        "H3ll0W0rld", "W3lc0m3T0Th3G4m3",
                        "docker run --rm -dit --name <NOMBREMAQUINA> --hostname <NOMBREMAQUINA> --network=<NETWORK> " +
                        "tleemcjr/metasploitable2:latest"));
            
            //Gift
            maquinas.Add("Gift", new Maquina("Gift", 1, "fmol107",
                        "this_is_a_gift", "gg_well_played",
                        "docker run -dit --name <NOMBREMAQUINA> --hostname <NOMBREMAQUINA> --network=<NETWORK> " +
                        "fmol107/gift"));
            
            //Debian rdp
            maquinas.Add("debian-rdp", new Maquina("debian-rdp", 0, "fmol",
                        "", "",
                        "docker run -d --name <NOMBREMAQUINA> --hostname <NOMBREMAQUINA> --network=<NETWORK> " +
                        "fmol107/debian-rdp"));
            

            Menu.MostrarMensajeGuardado(e.Message, true, 1, ConsoleColor.Red);
            Menu.MostrarMensajeGuardado("Datos por defecto cargados.", true, 4, ConsoleColor.Green);
        }


        /*
         * La serialización en json no guarda la herencia de clases.
         * Como no hay atributos distintos convertimos al usuario que será administrador.
         * TODO pasar serializacion json a base de datos
         */
        string uToA = "fmol";

        if (!(usuarios[uToA] is Administrador))
        {
            Usuario user = usuarios[uToA];

            Administrador admin = new Administrador(user.Nombre, user.Contrasena);
            admin.Puntuacion = user.Puntuacion;

            usuarios[uToA] = admin;
        }

    }

    public static string GetSHA256(string str)
    {
        SHA256 sha256 = SHA256.Create();
        ASCIIEncoding encoding = new ASCIIEncoding();
        byte[] stream = null;
        StringBuilder sb = new StringBuilder();
        stream = sha256.ComputeHash(encoding.GetBytes(str));
        for (int i = 0; i < stream.Length; i++) sb.AppendFormat("{0:x2}", stream[i]);
        return sb.ToString();
    }

}
