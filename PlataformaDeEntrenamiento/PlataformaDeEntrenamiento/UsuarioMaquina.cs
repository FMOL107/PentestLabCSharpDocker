//Autor: Franco Larrea

using System;

[Serializable]
class UsuarioMaquina
{
    protected Usuario usuario;
    protected Maquina maquina;

    protected bool usuarioCompletado;
    protected bool rootCompletado;

    protected bool completada;
    protected bool encendida;

    protected string nombreMaquina;
    protected string nombreRed;
    protected string nombreVPN;
    protected int puertoUtilizado;

    protected int numeroDePuertosVPN = 30;

    protected ConexionSSH conexionSSH = new ConexionSSH();

    public UsuarioMaquina(Usuario usuario, Maquina maquina)
    {
        this.usuario = usuario;
        this.maquina = maquina;
        completada = usuarioCompletado = rootCompletado = encendida = false;

        nombreMaquina = usuario.Nombre + "-" + maquina.Nombre;
        nombreRed = usuario.Nombre + "-red";
        nombreVPN = usuario.Nombre + "-vpn";
    }

    public Usuario Usuario
    {
        get { return usuario; }
        set { usuario = value; }
    }

    public Maquina Maquina
    {
        get { return maquina; }
        set { maquina = value; }
    }

    public bool UsuarioCompletado
    {
        get { return usuarioCompletado; }
        set { usuarioCompletado = value; }
    }

    public bool RootCompletado
    {
        get { return rootCompletado; }
        set { rootCompletado = value; }
    }

    public bool Completada
    {
        get { return completada = usuarioCompletado && rootCompletado; }
    }

    public bool Encendida
    {
        get { return encendida; }
        set { encendida = value; }
    }

    public int PuertoUtilizado 
    {
        get { return puertoUtilizado; }
        set { puertoUtilizado = value; }
    }

    public void Encender(Menu menu, bool espera = true, int masFilas = 0)
    {
        encendida = true;
        menu.MostrarMensaje("Encendiendo maquina...", espera, masFilas);
        puertoUtilizado = ObtenerPuertoLibre();
        
        CrearVPN();

        string cEncender = maquina.CDocker;

        cEncender = cEncender.Replace("<NOMBREMAQUINA>", nombreMaquina);
        cEncender = cEncender.Replace("<NETWORK>", nombreRed);

        conexionSSH.EjecutarComando(cEncender);

        menu.MostrarMensajeCorrecto("Maquina " + maquina.Nombre + " encendida", espera, masFilas+1);
    }

    public void ObtenerIpMaquina(Menu menu, bool espera = false, int masFilas = 0)
    {
        string cComprobarIP =
        "docker inspect " + nombreMaquina + " | grep IPAddress | tail -n1 | tr -d [:blank:]";

        string resultado = conexionSSH.EjecutarComando(cComprobarIP);

        resultado = resultado.Replace("IPAddress", "");
        resultado = resultado.Replace("\"", "");
        resultado = resultado.Replace(",", "");
        resultado = resultado.Replace(":", "");

        menu.MostrarMensaje(resultado, espera, masFilas);
    }

    public void MostrarConfiguracionVPN(Menu menu, bool espera = false, int masFilas = 0)
    {
        string cMostrarConf = "cat /wireguard/" + nombreVPN + "/peer1/peer1.conf";
        string resultado = conexionSSH.EjecutarComando(cMostrarConf);

        menu.MostrarMensaje("", espera, masFilas);
        Console.WriteLine(resultado);
    }

    public void Apagar(Menu menu, bool espera = true, int masFilas = 0)
    {
        encendida = false;

        menu.MostrarMensaje("Apagando maquina...", espera, masFilas);

        string cApagarMaquina = "docker stop -t0 " + nombreMaquina;
        string cApagarVPN = "docker stop -t0 " + nombreVPN;

        string cEliminarMaquina = "docker rm " + nombreMaquina;
        string cEliminarVPN = "docker rm " + nombreVPN;

        string cEliminarRedes = "docker network prune -f";

        conexionSSH.EjecutarComando(cApagarMaquina);
        conexionSSH.EjecutarComando(cApagarVPN);

        conexionSSH.EjecutarComando(cEliminarMaquina);
        conexionSSH.EjecutarComando(cEliminarVPN);

        conexionSSH.EjecutarComando(cEliminarRedes);

        menu.MostrarMensajeCorrecto("Maquina " + maquina.Nombre + " apagada", espera, masFilas+1);
    }

    public string Apagar(string s)
    {
        encendida = false;
        string mensaje = "Maquina " + usuario.Nombre + "-" + maquina.Nombre + " apagada";

        string cApagarMaquina = "docker stop " + nombreMaquina;
        string cApagarVPN = "docker stop " + nombreVPN;

        string cEliminarMaquina = "docker rm " + nombreMaquina;
        string cEliminarVPN = "docker rm " + nombreVPN;

        string cEliminarRedes = "docker network prune -f";

        conexionSSH.EjecutarComando(cApagarMaquina);
        conexionSSH.EjecutarComando(cApagarVPN);

        conexionSSH.EjecutarComando(cEliminarMaquina);
        conexionSSH.EjecutarComando(cEliminarVPN);

        conexionSSH.EjecutarComando(cEliminarRedes);

        return mensaje;
    }

    public void MostrarDetalles(Menu menu, bool espera = true, int masFilas = 0)
    {
        menu.MostrarMensaje("Completada: " + completada, espera, masFilas + 1);
        menu.MostrarMensaje("Bandera de usuario: " + usuarioCompletado, espera, masFilas + 2);
        menu.MostrarMensaje("Bandera del root: " + rootCompletado, espera, masFilas + 3);
        menu.MostrarMensaje("Numero de writeups: " + maquina.numeroDeWriteups(), espera, masFilas + 4);
        menu.MostrarMensaje("Estado: " + (encendida ? "Encendida" : "Apagada"), espera, masFilas + 5);
    }

    public string ComprobarPuertosExpuestos()
    {
        string cComprobarPuertos = 
            "docker ps --format 'table {{.Ports}}' | " +
            "cut -d ':' -f2 | " +
            "cut -d '-' -f1 | " +
            "grep -v PORTS";

        string resultado = conexionSSH.EjecutarComando(cComprobarPuertos);

        return resultado;
    }

    public int ObtenerPuertoLibre()
    {
        string puertosOcupados = ComprobarPuertosExpuestos();
        int puertoLibre = 0;

        for (int puerto = 51820; puerto <= 51820+numeroDePuertosVPN; puerto++)
        {
            if (!puertosOcupados.Contains(puerto.ToString()))
            {
                puertoLibre = puerto;
                break;
            }
        }

        return puertoLibre;
    }

    public void CrearRed()
    {
        string cCrearRed = "docker network create " + nombreRed;

        if (!existeRed())
            conexionSSH.EjecutarComando(cCrearRed);
    }

    public bool existeRed()
    {
        string cComprobarRed = "docker network ls | grep " + nombreRed;

        string resultado = conexionSSH.EjecutarComando(cComprobarRed);

        if (resultado.Contains(nombreRed))
            return true;
        else
            return false;
    }

    public void CrearVPN()
    {
        string cSystemPrune = "docker system prune -f";
        conexionSSH.EjecutarComando(cSystemPrune);

        CrearRed();

        //Creamos la VPN
        string cCrearVPN = "docker run -d " +
            "--network=" + nombreRed + " " +
            "--name=" + nombreVPN + " " +
            "--cap-add=NET_ADMIN " +
            "--cap-add=SYS_MODULE " +
            "-e PUID=1000 " +
            "-e PGID=1000 " +
            "-e TZ=Europe/Madrid " +
            "-e SERVERURL=" + conexionSSH.Hostname + " " +
            "-e SERVERPORT=" + puertoUtilizado + " " +
            "-e PEERS=1 " +
            "-e PEERDNS=auto " +
            "-e INTERNAL_SUBNET=10.10.10.0 " +
            "-p " + puertoUtilizado + ":51820/udp " +
            "-v /wireguard/" + nombreVPN + ":/config " +
            "-v /lib/modules:/lib/modules " +
            "-v /usr/src:/usr/src " +
            "--sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" " +
            "--restart unless-stopped " +
            "linuxserver/wireguard";

        if (!ExisteVPN())
            conexionSSH.EjecutarComando(cCrearVPN);
    }

    public bool ExisteVPN()
    {
        string cComprobarVPN = "docker ps --format 'table {{.Names}}' | grep " + nombreVPN;

        string resultado = conexionSSH.EjecutarComando(cComprobarVPN);

        if (resultado.Contains(nombreVPN))
            return true;
        else
            return false;
    }

}